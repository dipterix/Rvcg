--- vcg/space/index/kdtree/kdtree.h
+++ vcg/space/index/kdtree/kdtree.h
@@ -228,34 +228,34 @@ namespace vcg {
       if (mNeighborQueue.getNofElements() < k || qnode.sq < mNeighborQueue.getTopWeight())
       {
         //when we arrive to a leaf
-        if (node.leaf)
+        if (node.NodeU.mynode.leaf)
         {
           --count; //pop of the leaf
 
           //end is the index of the last element of the leaf in mPoints
-          unsigned int end = node.start + node.size;
+          unsigned int end = node.NodeU.myleaf.start+node.NodeU.myleaf.size;
           //adding the element of the leaf to the heap
-          for (unsigned int i = node.start; i < end; ++i)
+          for (unsigned int i=node.NodeU.myleaf.start ; i<end ; ++i)
             mNeighborQueue.insert(mIndices[i], vcg::SquaredNorm(queryPoint - mPoints[i]));
         }
         //otherwise, if we're not on a leaf
         else
         {
           // the new offset is the distance between the searched point and the actual split coordinate
-          float new_off = queryPoint[node.dim] - node.splitValue;
+          float new_off = queryPoint[node.NodeU.mynode.dim] - node.NodeU.mynode.splitValue;
 
           //left sub-tree
           if (new_off < 0.)
           {
-            mNodeStack[count].nodeId = node.firstChildId;
+            mNodeStack[count].nodeId  = node.NodeU.mynode.firstChildId;
             //in the father's nodeId we save the index of the other sub-tree (for backtracking)
-            qnode.nodeId = node.firstChildId + 1;
+            qnode.nodeId = node.NodeU.mynode.firstChildId+1;
           }
           //right sub-tree (same as above)
           else
           {
-            mNodeStack[count].nodeId = node.firstChildId + 1;
-            qnode.nodeId = node.firstChildId;
+             mNodeStack[count].nodeId  = node.NodeU.mynode.firstChildId+1;
+	     qnode.nodeId = node.NodeU.mynode.firstChildId;
           }
           //distance is inherited from the father (while descending the tree it's equal to 0)
           mNodeStack[count].sq = qnode.sq;
